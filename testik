import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:medical_app/models/chat_message.dart';
import 'package:medical_app/models/data_providers.dart';
import 'package:medical_app/models/network.dart';
import 'package:medical_app/models/order.dart';
import 'package:medical_app/screens/doctor/avalible_order.dart';
import 'package:medical_app/utilities/constans.dart';
import 'package:provider/provider.dart';
import 'package:web_socket_channel/io.dart';
import 'package:web_socket_channel/web_socket_channel.dart';

class DetailOrderScreen extends StatefulWidget {
  final String orderId;
  final String type;
  DetailOrderScreen({this.orderId, this.type}):channel= IOWebSocketChannel.connect('wss://medic.bw2api.ru/api/v1/order/chat/$orderId/$type');
  final WebSocketChannel channel;
      
  @override
  _DetailOrderScreenState createState() => _DetailOrderScreenState(channel: channel);
}

Widget _buildMessageTo({String text, DateTime toDate, bool user}) {
  return Row(
    mainAxisAlignment:
        user == true ? MainAxisAlignment.end : MainAxisAlignment.start,
    //this will determine if the message should be displayed left or right
    children: [
      Flexible(
        //Wrapping the container with flexible widget
        child: Container(
            constraints: BoxConstraints(minWidth: 150, maxWidth: 300),
            padding: EdgeInsets.all(8.0),
            margin: EdgeInsets.all(8.0),
            decoration: BoxDecoration(
              color: Color.fromRGBO(228, 239, 243, 1.0),
              borderRadius: BorderRadius.circular(6),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: user == true
                  ? CrossAxisAlignment.end
                  : CrossAxisAlignment.start,
              children: <Widget>[
                Flexible(
                  //We only want to wrap the text message with flexible widget
                  child: Container(
                    child: Text(text),
                  ),
                ),
                SizedBox(
                  width: 8,
                ),
                Padding(
                  padding: EdgeInsets.only(top: 16),
                  child: Text(
                    DateFormat(
                      'dd MMM yyyy  HH:mm',
                    ).format(toDate),
                    style: TextStyle(fontSize: 13, color: Colors.grey),
                  ),
                ),
              ],
            )),
      )
    ],
  );
}

class _DetailOrderScreenState extends State<DetailOrderScreen> {
  final WebSocketChannel channel;
  final _inputController = TextEditingController();
  List<Order> chatMessages = [];
  List ss = [];
  List messageList = [];

  


  _DetailOrderScreenState({this.channel}) {
    channel.stream.listen((data) {
      setState(() {
        print(data);
        messageList.add({'text':data});
      });
    });
  }
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    httpService.getChat(widget.orderId).then((chatFromServer) {
      setState(() {
        chatMessages = chatFromServer;
      });
      ss = chatMessages
          .map((e) => e.chat
              .map((c) =>
                  {'text': c.text, 'datetime': c.date, 'isUser': c.isUser})
              .toList())
          .toList()
          .expand((pair) => pair)
          .toList()
          .map((e) => e)
          .toList();
      messageList.addAll(ss);
    });
  }

  @override
  Widget build(BuildContext context) {
    print(widget.orderId);
    print(widget.type);
    return SafeArea(
      child: Scaffold(
          appBar: AppBar(
            title: Text('Заказ' + widget.orderId),
          ),
          body: Column(
            children: <Widget>[
              Expanded(
                flex: 5,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 1),
                  width: double.infinity,
                  child: FutureBuilder(
                    future: httpService.getChat(widget.orderId),
                    builder: (BuildContext context,
                        AsyncSnapshot<List<Order>> snapshot) {
                      List<Order> orders = snapshot.data;
                      if (snapshot.hasData) {
                        return Column(
                          children: orders
                              .map(
                                (Order order) => Expanded(
                                  child: ListView.builder(
                                      itemCount: order.chat.length,
                                      itemBuilder:
                                          (BuildContext context, int index) {
                                        return _buildMessageTo(
                                            text: order.chat[index].text,
                                            toDate: order.chat[index].date,
                                            user: order.chat[index].isUser);
                                      }),
                                ),
                              )
                              .toList(),
                        );
                      } else if (snapshot.hashCode == 400) {
                        return Center(child: Text('Соединение потеряно'));
                      } else if (snapshot.hashCode == 401) {
                        return Center(child: Text('Соединение потеряно'));
                      } else {
                        return Center(child: CircularProgressIndicator());
                      }
                    },
                  ),
                ),
              ),
              Expanded(
                flex: 1,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 5),
                  width: double.infinity,
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: <Widget>[
                      Flexible(
                        child: TextField(
                          controller: _inputController,
                          keyboardType: TextInputType.multiline,
                          maxLines: null,
                          maxLength: 200,
                          decoration: InputDecoration.collapsed(
                              hintText: "Отправить сообщение"),
                          onChanged: (String text) => null,
                        ),
                      ),
                      IconButton(
                          icon: Icon(Icons.send), onPressed: () => {
                            sendMsg()
                            // if (_inputController.text.isNotEmpty) {
                              
                            // }
                          }),
                    ],
                  ),
                ),
              ),
            ],
          )),
    );
  }

  @override
  void dispose() {
    _inputController.dispose();
    widget.channel.sink.close();
    super.dispose();
  }

  Future sendMsg() async {
    final order = Provider.of<OrderProvider>(context, listen: false);
    final String input = _inputController.value.text;
    final bool isUser = Constants.prefs.getBool("type");
    var msg = ChatMessage(DateTime.now(), input, isUser);
    var msgList = ChatMessage(DateTime.now(), input, isUser).toJson();
    if (order.order.chat == null) {
      order.order.chat = [];
      order.order.chat.add(msg);
    }
    try {
      channel.sink.add(input);
      messageList.add({'text':input});
      // chatMessages.add(msgList);
      order.order.chat.add(msg);

      // print(input);
      await AuthNetwork.of(context).sendMessage(widget.orderId, chatMessages);
      // Navigator.pop(context);
      // showDialog<String>(
      //   context: context,
      //   builder: (BuildContext context) => AlertDialog(
      //     title: const Text('Вызовы добавлен'),
      //     actions: <Widget>[
      //       FlatButton(
      //         child: Text('Окей'),
      //         onPressed: () => Navigator.pop(context),
      //       ),
      //     ],
      //   ),
      // );
      print(chatMessages);
      print(order.order.chat);
    } catch (err) {
      print(err);
    }
  }
}

